name: Deploy Static Website

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: ap-south-1
      TF_WORKSPACE: dev

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=static-website/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}"

      - name: Terraform Plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

  deploy-content:
    name: Deploy Website Content
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get S3 Bucket Name
        run: |
          BUCKET_NAME=$(terraform output -raw bucket_name)
          echo "BUCKET_NAME=${BUCKET_NAME}" >> $GITHUB_ENV

      - name: Upload Website Content
        run: |
          aws s3 sync website/ s3://${BUCKET_NAME}/ \
            --delete \
            --cache-control "max-age=86400"

      - name: Invalidate CloudFront Cache
        run: |
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          aws cloudfront create-invalidation \
            --distribution-id ${DISTRIBUTION_ID} \
            --paths "/*"